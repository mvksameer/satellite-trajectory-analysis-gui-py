# ============================================================
# SATELLITE TRACKER ANALYSIS - FLASK APPLICATION
# Includes original Python code functionality
# ============================================================
# Required installations:
# pip install flask numpy sgp4
# 
# To run: python app.py
# Then open: http://localhost:5001
# ============================================================

from flask import Flask, render_template_string, jsonify, request, send_file
import numpy as np
from datetime import datetime
from sgp4.api import Satrec, jday
import io
import csv

app = Flask(__name__)

# ============================================================
# BACKEND PYTHON FUNCTIONS (From your original code)
# ============================================================

def calculate_altitude_from_tle(tle_line_1, tle_line_2):
    """
    Calculate satellite altitude over time using SGP4 propagation
    Based on the trace_altitude_graph function from original code
    """
    try:
        # Parse TLE using sgp4 (fixed from original: Strec -> Satrec)
        satellite = Satrec.twoline2rv(tle_line_1, tle_line_2)
        
        # Define time range (24 hours, 1 minute intervals)
        start_time = 0
        end_time = 24 * 3600  # 1 day in seconds
        step = 60  # 1 minute
        
        # Fixed from original: use arange, not linspace with step
        times = np.arange(start_time, end_time, step)
        
        # Calculate altitude at each time step
        altitudes = []
        time_hours = []
        
        for t in times:
            jd, fr = jday(2024, 1, 1, 0, 0, t)
            # Use SGP4 to get satellite position
            error, r, v = satellite.sgp4(jd, fr)
            
            if error == 0:  # No error
                # r is position vector [x, y, z] in km
                # Calculate altitude above Earth's surface
                distance = (r[0]**2 + r[1]**2 + r[2]**2)**0.5
                altitude = distance - 6378.135  # Earth's radius in km
                altitudes.append(altitude)
                time_hours.append(t / 3600)  # Convert to hours
        
        return time_hours, altitudes
    
    except Exception as e:
        print(f"Error in calculate_altitude_from_tle: {e}")
        return [], []


def calculate_3d_orbit_keplerian(a, e, i, Omega, w, M0, num_points=300):
    """
    Calculate 3D orbital positions using Keplerian elements
    Based on visualise_3d_orbit from original code
    Note: Original used PyAstronomy's KeplerEllipse, this uses direct calculation
    """
    # Convert degrees to radians
    i_rad = np.radians(i)
    Omega_rad = np.radians(Omega)
    w_rad = np.radians(w)
    M0_rad = np.radians(M0)
    
    # Calculate positions for one complete orbit
    positions_x = []
    positions_y = []
    positions_z = []
    
    for j in range(num_points):
        # Mean anomaly at this point
        M = M0_rad + (j / num_points) * 2 * np.pi
        
        # Solve Kepler's equation for eccentric anomaly
        E = M
        for _ in range(10):  # Newton-Raphson iteration
            E = M + e * np.sin(E)
        
        # Calculate true anomaly
        nu = 2 * np.arctan2(
            np.sqrt(1 + e) * np.sin(E / 2),
            np.sqrt(1 - e) * np.cos(E / 2)
        )
        
        # Distance from focus
        r = a * (1 - e * np.cos(E))
        
        # Position in orbital plane (perifocal coordinates)
        x_perifocal = r * np.cos(nu)
        y_perifocal = r * np.sin(nu)
        
        # Rotation matrices to ECI coordinates
        # R3(-Omega) * R1(-i) * R3(-w)
        cos_O = np.cos(Omega_rad)
        sin_O = np.sin(Omega_rad)
        cos_i = np.cos(i_rad)
        sin_i = np.sin(i_rad)
        cos_w = np.cos(w_rad)
        sin_w = np.sin(w_rad)
        
        # Transform to ECI coordinates
        x = x_perifocal * (cos_O * cos_w - sin_O * sin_w * cos_i) - y_perifocal * (cos_O * sin_w + sin_O * cos_w * cos_i)
        y = x_perifocal * (sin_O * cos_w + cos_O * sin_w * cos_i) - y_perifocal * (sin_O * sin_w - cos_O * cos_w * cos_i)
        z = x_perifocal * (sin_w * sin_i) + y_perifocal * (cos_w * sin_i)
        
        positions_x.append(x)
        positions_y.append(y)
        positions_z.append(z)
    
    return positions_x, positions_y, positions_z


def display_sliders_defaults():
    """
    From original code: Default Keplerian element values
    Semi-Major Axis: 10000 km
    Eccentricity: 0.1
    Inclination: 90 degrees
    RAAN: 40 degrees
    Argument of Periapsis: 1 degree
    Mean Anomaly: 1 degree
    """
    return {
        'semi_major_axis': 10000,
        'eccentricity': 0.1,
        'inclination': 90,
        'raan': 40,
        'argument_of_perigee': 1,
        'mean_anomaly': 1
    }


# ============================================================
# FLASK ROUTES
# ============================================================

@app.route('/')
def index():
    """Main page route"""
    return render_template_string(HTML_TEMPLATE)


@app.route('/api/calculate', methods=['POST'])
def calculate():
    """API endpoint for orbital calculations"""
    try:
        data = request.json
        tle_line_1 = data.get('tle1')
        tle_line_2 = data.get('tle2')
        
        # Calculate altitude data
        times, altitudes = calculate_altitude_from_tle(tle_line_1, tle_line_2)
        
        # Get Keplerian elements
        a = float(data.get('semi_major_axis', 10000))
        e = float(data.get('eccentricity', 0.1))
        i = float(data.get('inclination', 90))
        Omega = float(data.get('raan', 40))
        w = float(data.get('argument_of_perigee', 1))
        M0 = float(data.get('mean_anomaly', 1))
        
        # Calculate 3D orbit
        pos_x, pos_y, pos_z = calculate_3d_orbit_keplerian(a, e, i, Omega, w, M0)
        
        return jsonify({
            'success': True,
            'altitude_times': times,
            'altitude_values': altitudes,
            'orbit_x': pos_x,
            'orbit_y': pos_y,
            'orbit_z': pos_z
        })
    
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500


# ============================================================
# HTML TEMPLATE
# ============================================================

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Satellite Tracker Analysis</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/plotly.js/2.27.0/plotly.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0f0f23, #1a1a3a);
            color: #ffffff;
            min-height: 100vh;
        }

        .header {
            background: rgba(26, 26, 58, 0.9);
            backdrop-filter: blur(10px);
            padding: 20px;
            text-align: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

        .header h1 {
            font-size: 2.5rem;
            background: linear-gradient(45deg, #4fc3f7, #29b6f6, #0288d1);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
        }

        .header p {
            color: #b0bec5;
            font-size: 1.1rem;
        }

        .container {
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 20px;
            padding: 20px;
            max-width: 1400px;
            margin: 0 auto;
        }

        .left-panel, .right-panel {
            background: rgba(26, 26, 58, 0.6);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }

        .control-group {
            margin-bottom: 20px;
        }

        .control-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #e3f2fd;
            font-size: 0.95rem;
        }

        .slider {
            width: 100%;
            height: 8px;
            border-radius: 5px;
            background: linear-gradient(to right, #263238, #37474f);
            outline: none;
            appearance: none;
            cursor: pointer;
        }

        .slider::-webkit-slider-thumb {
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: linear-gradient(135deg, #29b6f6, #0288d1);
            cursor: pointer;
            box-shadow: 0 3px 10px rgba(41, 182, 246, 0.4);
        }

        .slider::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: linear-gradient(135deg, #29b6f6, #0288d1);
            cursor: pointer;
            border: none;
        }

        .value-display {
            display: inline-block;
            background: rgba(41, 182, 246, 0.2);
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 0.9rem;
            color: #29b6f6;
            font-weight: 600;
            margin-left: 10px;
        }

        .tle-section {
            background: rgba(15, 15, 35, 0.6);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            border: 1px solid rgba(41, 182, 246, 0.3);
        }

        .tle-section h3 {
            margin-bottom: 10px;
            color: #29b6f6;
        }

        .tle-input {
            width: 100%;
            background: rgba(15, 15, 35, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            padding: 10px;
            color: #ffffff;
            font-family: 'Courier New', monospace;
            font-size: 0.85rem;
            margin-bottom: 8px;
        }

        .button {
            background: linear-gradient(135deg, #29b6f6, #0288d1);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 0.95rem;
            font-weight: 600;
            margin: 5px;
            box-shadow: 0 4px 15px rgba(41, 182, 246, 0.3);
            transition: all 0.3s ease;
        }

        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(41, 182, 246, 0.4);
        }

        .download-button {
            background: linear-gradient(135deg, #4caf50, #388e3c);
        }

        .plot-container {
            background: rgba(15, 15, 35, 0.4);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .plot-title {
            color: #29b6f6;
            margin-bottom: 15px;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .status {
            padding: 10px;
            border-radius: 8px;
            margin: 10px 0;
            text-align: center;
            font-weight: 600;
        }

        .status.success {
            background: rgba(76, 175, 80, 0.2);
            color: #4caf50;
            border: 1px solid rgba(76, 175, 80, 0.3);
        }

        .status.error {
            background: rgba(244, 67, 54, 0.2);
            color: #f44336;
            border: 1px solid rgba(244, 67, 54, 0.3);
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
            color: #29b6f6;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            border: 3px solid rgba(41, 182, 246, 0.3);
            border-top: 3px solid #29b6f6;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 1200px) {
            .container {
                grid-template-columns: 1fr;
            }
            .right-panel {
                order: -1;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🛰️ Satellite Tracker Analysis</h1>
        <p>Interactive Orbital Mechanics visualisation</p>
    </div>

    <div class="container">
        <div class="left-panel">
            <div class="plot-container">
                <div class="plot-title">Altitude vs Time Graph</div>
                <div id="altitudePlot" style="width:100%; height:350px;"></div>
            </div>
            
            <div class="plot-container">
                <div class="plot-title">3D Orbital Visualisation</div>
                <div id="orbitPlot" style="width:100%; height:400px;"></div>
            </div>

            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>Calculating orbital parameters using Python backend...</p>
            </div>

            <div id="status"></div>
        </div>

        <div class="right-panel">
            <div class="tle-section">
                <h3>Two-Line Element (TLE) Data</h3>
                <input type="text" class="tle-input" id="tleLine1" 
                       value="1 25544U 98067A   21257.91276829  .00000825  00000-0  24323-4 0  9991">
                <input type="text" class="tle-input" id="tleLine2"
                       value="2 25544  51.6461  89.6503 0003031 120.4862 259.0942 15.48881082307119">
                <button class="button" onclick="updateFromTLE()">Load from TLE</button>
            </div>

            <div class="control-group">
                <label>Semi-Major Axis: <span class="value-display" id="semiMajorAxisValue">10000</span> km</label>
                <input type="range" class="slider" id="semiMajorAxis" min="2000" max="50000" value="10000" 
                       oninput="updateSliderValue(this, 'semiMajorAxisValue', ' km')">
            </div>

            <div class="control-group">
                <label>Eccentricity: <span class="value-display" id="eccentricityValue">0.10</span></label>
                <input type="range" class="slider" id="eccentricity" min="0" max="0.99" step="0.01" value="0.1" 
                       oninput="updateSliderValue(this, 'eccentricityValue', '')">
            </div>

            <div class="control-group">
                <label>Inclination: <span class="value-display" id="inclinationValue">90</span>°</label>
                <input type="range" class="slider" id="inclination" min="0" max="180" value="90" 
                       oninput="updateSliderValue(this, 'inclinationValue', '°')">
            </div>

            <div class="control-group">
                <label>RAAN: <span class="value-display" id="raanValue">40</span>°</label>
                <input type="range" class="slider" id="raan" min="0" max="360" value="40" 
                       oninput="updateSliderValue(this, 'raanValue', '°')">
            </div>

            <div class="control-group">
                <label>Argument of Perigee: <span class="value-display" id="argumentOfPerigeeValue">1</span>°</label>
                <input type="range" class="slider" id="argumentOfPerigee" min="0" max="360" value="1" 
                       oninput="updateSliderValue(this, 'argumentOfPerigeeValue', '°')">
            </div>

            <div class="control-group">
                <label>Mean Anomaly: <span class="value-display" id="meanAnomalyValue">1</span>°</label>
                <input type="range" class="slider" id="meanAnomaly" min="0" max="360" value="1" 
                       oninput="updateSliderValue(this, 'meanAnomalyValue', '°')">
            </div>

            <div style="text-align: center; margin-top: 20px;">
                <button class="button" onclick="updateVisualisation()">Update Visualisation</button>
                <button class="button download-button" onclick="downloadCSV()">Download CSV</button>
            </div>
        </div>
    </div>

    <script>
        let currentData = null;

        function updateSliderValue(slider, displayId, unit) {
            const value = parseFloat(slider.value);
            document.getElementById(displayId).textContent = 
                (unit === '°' || unit === ' km') ? value.toFixed(unit === ' km' ? 0 : 2) : value.toFixed(2);
        }

        function showStatus(message, type = 'success') {
            const statusDiv = document.getElementById('status');
            statusDiv.innerHTML = `<div class="status ${type}">${message}</div>`;
            setTimeout(() => statusDiv.innerHTML = '', 3000);
        }

        function toggleLoading(show) {
            document.getElementById('loading').classList.toggle('show', show);
        }

        async function updateVisualisation() {
            toggleLoading(true);
            
            try {
                const response = await fetch('/api/calculate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        tle1: document.getElementById('tleLine1').value,
                        tle2: document.getElementById('tleLine2').value,
                        semi_major_axis: document.getElementById('semiMajorAxis').value,
                        eccentricity: document.getElementById('eccentricity').value,
                        inclination: document.getElementById('inclination').value,
                        raan: document.getElementById('raan').value,
                        argument_of_perigee: document.getElementById('argumentOfPerigee').value,
                        mean_anomaly: document.getElementById('meanAnomaly').value
                    })
                });

                const data = await response.json();
                
                if (data.success) {
                    currentData = data;
                    updatePlots(data);
                    showStatus('Calculation complete using Python backend!');
                } else {
                    showStatus('Error: ' + data.error, 'error');
                }
            } catch (error) {
                showStatus('Connection error: ' + error.message, 'error');
            } finally {
                toggleLoading(false);
            }
        }

        function updatePlots(data) {
            // Altitude plot
            Plotly.newPlot('altitudePlot', [{
                x: data.altitude_times,
                y: data.altitude_values,
                type: 'scatter',
                mode: 'lines',
                line: { color: '#29b6f6', width: 2 }
            }], {
                paper_bgcolor: 'rgba(0,0,0,0)',
                plot_bgcolor: 'rgba(15,15,35,0.6)',
                font: { color: '#ffffff' },
                xaxis: { title: 'Time (hours)', gridcolor: 'rgba(255,255,255,0.1)' },
                yaxis: { title: 'Altitude (km)', gridcolor: 'rgba(255,255,255,0.1)' },
                margin: { l: 60, r: 20, t: 20, b: 60 }
            }, {responsive: true});

            // 3D orbit plot
            Plotly.newPlot('orbitPlot', [
                {
                    x: data.orbit_x, y: data.orbit_y, z: data.orbit_z,
                    type: 'scatter3d', mode: 'lines',
                    name: 'Trajectory',
                    line: { color: '#29b6f6', width: 4 }
                },
                {
                    x: [0], y: [0], z: [0],
                    type: 'scatter3d', mode: 'markers',
                    name: 'Earth',
                    marker: { size: 20, color: '#4caf50' }
                },
                {
                    x: [data.orbit_x[0]], y: [data.orbit_y[0]], z: [data.orbit_z[0]],
                    type: 'scatter3d', mode: 'markers',
                    name: 'Periapsis',
                    marker: { size: 10, color: '#ff5722' }
                }
            ], {
                paper_bgcolor: 'rgba(0,0,0,0)',
                font: { color: '#ffffff' },
                scene: {
                    xaxis: { title: 'X (km)', gridcolor: 'rgba(255,255,255,0.1)' },
                    yaxis: { title: 'Y (km)', gridcolor: 'rgba(255,255,255,0.1)' },
                    zaxis: { title: 'Z (km)', gridcolor: 'rgba(255,255,255,0.1)' },
                    aspectmode: 'cube'
                },
                margin: { l: 0, r: 0, t: 0, b: 0 }
            }, {responsive: true});
        }

        function updateFromTLE() {
            try {
                const line2 = document.getElementById('tleLine2').value.trim();
                const inclination = parseFloat(line2.substring(8, 16).trim());
                const raan = parseFloat(line2.substring(17, 25).trim());
                const eccentricity = parseFloat('0.' + line2.substring(26, 33).trim());
                const argPerigee = parseFloat(line2.substring(34, 42).trim());
                const meanAnomaly = parseFloat(line2.substring(43, 51).trim());
                const meanMotion = parseFloat(line2.substring(52, 63).trim());
                
                const GM = 398600.4418;
                const n = meanMotion * 2 * Math.PI / 86400;
                const semiMajorAxis = Math.pow(GM / (n * n), 1/3);

                document.getElementById('semiMajorAxis').value = Math.round(semiMajorAxis);
                document.getElementById('eccentricity').value = eccentricity.toFixed(4);
                document.getElementById('inclination').value = Math.round(inclination);
                document.getElementById('raan').value = Math.round(raan);
                document.getElementById('argumentOfPerigee').value = Math.round(argPerigee);
                document.getElementById('meanAnomaly').value = Math.round(meanAnomaly);

                updateSliderValue(document.getElementById('semiMajorAxis'), 'semiMajorAxisValue', ' km');
                updateSliderValue(document.getElementById('eccentricity'), 'eccentricityValue', '');
                updateSliderValue(document.getElementById('inclination'), 'inclinationValue', '°');
                updateSliderValue(document.getElementById('raan'), 'raanValue', '°');
                updateSliderValue(document.getElementById('argumentOfPerigee'), 'argumentOfPerigeeValue', '°');
                updateSliderValue(document.getElementById('meanAnomaly'), 'meanAnomalyValue', '°');

                updateVisualisation();
            } catch (error) {
                showStatus('Error parsing TLE', 'error');
            }
        }

        function downloadCSV() {
            if (!currentData) {
                showStatus('No data to download', 'error');
                return;
            }

            let csv = "Satellite Tracker Analysis\\n";
            csv += `Export Date,${new Date().toLocaleString()}\\n\\n`;
            csv += "Time (hours),Altitude (km)\\n";
            currentData.altitude_times.forEach((t, i) => {
                csv += `${t.toFixed(6)},${currentData.altitude_values[i].toFixed(6)}\\n`;
            });

            const blob = new Blob([csv], { type: 'text/csv' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `satellite_data_${new Date().toISOString().slice(0,10)}.csv`;
            link.click();
            showStatus('CSV downloaded!');
        }

        window.addEventListener('load', () => {
            updateVisualisation();
        });
    </script>
</body>
</html>
"""

# ============================================================
# MAIN EXECUTION
# ============================================================

if __name__ == '__main__':
    import socket
    
    # Function to find an available port
    def find_free_port():
        for port in range(5001, 5100):
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.bind(('', port))
                sock.close()
                return port
            except OSError:
                continue
        return 5001
    
    port = find_free_port()
    
    print("\n" + "="*60)
    print("SATELLITE TRACKER ANALYSIS - Flask Server")
    print("="*60)
    print(f"✓ Original Python code integrated (SGP4 calculations)")
    print(f"✓ Server starting on: http://localhost:{port}")
    print("✓ Press Ctrl+C to stop the server")
    print("="*60 + "\n")
    
    app.run(debug=True, host='0.0.0.0', port=port)